rules:
  - id: javascript_prototype_pollution
    languages:
      - typescript
      - javascript
    severity: CRITICAL
    message: |
      Semgrep found a match for possible prototype pollution vulnerability.
    pattern-either:

      # direct assignment
      - pattern-either:
          - patterns:
              - pattern: $SINK[...] = $INPUT[...];
              - pattern-inside: |
                    function $FOO(..., $INPUT, ...){
                      ...
                    }

      # object.assign()
      - pattern-either:
          # from request
          - patterns:
              - pattern: Object.assign($SINK, $REQ.$INPUT);
              - pattern-inside: |
                  $FOO.$HTTPMETHOD("...", ($REQ, ...) => {
                    ...
                  });
          # from function parameter
          - patterns:
            - pattern: Object.assign($SINK, $INPUT);
            - pattern-inside: |
                function $FOO(..., $INPUT, ...){
                  ...
                }
            
      # use of common functions/libraries # NEED ADJUSTMENT
      - pattern-either:
          # lodash.merge
          - patterns:
              - pattern: $LODASH.merge($SINK, $INPUT);
              - pattern-inside: |
                  function $FOO(..., $INPUT, ...){
                    ...
                  }

          # deepMerge
          - patterns:
              - pattern: deepMerge($SINK, $INPUT);
              - pattern-inside: |
                  $APP.$HTTPMETHOD("...", ($REQ, $RES) => {
                    ...
                    const $INPUT = JSON.parse($REQ.$METHOD);
                    ...
                  })

          # lodash.set
          - patterns:
              - pattern: set({}, req.body.path, req.body.value);