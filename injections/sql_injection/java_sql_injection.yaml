rules:
  - id: java.sql_injection
    languages:
      - java
    severity: ERROR
    message: Detected user input used to manually construct a SQL string. This is
      usually bad practice because manual construction could accidentally result
      in a SQL injection. An attacker could use a SQL injection to steal or
      modify contents of the database. Instead, use a parameterized query which
      is available by default in most database engines. Alternatively, consider
      using an object-relational mapper (ORM) such as Sequelize which will
      protect your queries.
    options:
      interfile: true
    mode: taint
    pattern-sources:
      - patterns:
          - focus-metavariable: $EVENT
          - pattern-either:
              - pattern: >
                  $HANDLERTYPE $HANDLER($TYPE $EVENT,
                  com.amazonaws.services.lambda.runtime.Context $CONTEXT) {
                    ...
                  }
              - pattern: >
                  $HANDLERTYPE $HANDLER(InputStream $EVENT, OutputStream $OUT,
                  com.amazonaws.services.lambda.runtime.Context $CONTEXT) {
                    ...
                  }
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern: |
                  "$SQLSTR" + ...
              - pattern: |
                  "$SQLSTR".concat(...)
              - patterns:
                  - pattern-inside: |
                      StringBuilder $SB = new StringBuilder("$SQLSTR");
                      ...
                  - pattern: $SB.append(...)
              - patterns:
                  - pattern-inside: |
                      $VAR = "$SQLSTR";
                      ...
                  - pattern: $VAR += ...
              - pattern: String.format("$SQLSTR", ...)
          - metavariable-regex:
              metavariable: $SQLSTR
              regex: (?i)(select|delete|insert|create|update|alter|drop)\b
          - pattern-not-inside: |
              System.out.$PRINTLN(...)